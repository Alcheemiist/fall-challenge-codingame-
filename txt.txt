#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdbool.h>

// touver la bonne combination pour learner et lèutiliser a avoir la reciette cibléé 
/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/
    int try = 0;
    int ttt = 0;
    int u =0;
    int jj = 0;
    int m = 0;
    int unixo = 0;
    int high = 0;

    int id[20];
    int delta0[20] , delta1[20], delta2[20] , delta3[20], pricee[20];
    int b_index = 0;

    int id_s[20];
    int d0[20], d1[20], d2[20], d3[20], castablee[20];
    int y_index = 0;

    int id_l[20];
    int l0[20], l1[20], l2[20], l3[20];
    int l_index = 0;

    int inv_0;
    int inv_1;
    int inv_2;
    int inv_3;
    int my_score = 0;
    
    int  process =0;
    char *action = NULL;
    int castablisation = 0;
    int index_to_learn = 0;
    
    int save = 0;
    int index_of_brewing = 0;
    int i0 = 0;
    int i1 = 0;
    int i2 = 0;
    int i3 = 0;
    int v_score = 0;
    int indexofcast = 0;
    
    static int numbersofspeels = 0; 

    void assign_l(int i)
    {
        process = id_l[i];
        
    }

    void assign(int i)
    {
        indexofcast = i;
        process = id_s[i];
        castablisation = castablee[i];
       
    }

int main()
{
    
    while (1) {
        // the number of spells and recipes in play
        int action_count;
        scanf("%d", &action_count);

        for (int i = 0; i < action_count; i++) {
            
            // the unique ID of this spell or recipe
            int action_id;
            // in the first league: BREW; later: CAST, OPPONENT_CAST, LEARN, BREW
            char action_type[21];
            // tier-0 ingredient change
            int delta_0;
            // tier-1 ingredient change
            int delta_1;
            // tier-2 ingredient change
            int delta_2;
            // tier-3 ingredient change
            int delta_3;
            // the price in rupees if this is a potion
            int price;
            // in the first two leagues: always 0; later: the index in the tome if this is a tome spell, equal to the read-ahead tax
            int tome_index;
            // in the first two leagues: always 0; later: the amount of taxed tier-0 ingredients you gain from learning this spell
            int tax_count;
            // in the first league: always 0; later: 1 if this is a castable player spell
            bool castable;
            // for the first two leagues: always 0; later: 1 if this is a repeatable player spell
            bool repeatable;
            int _castable;
            int _repeatable;
            scanf("%d%s%d%d%d%d%d%d%d%d%d", &action_id, action_type, &delta_0, &delta_1, &delta_2, &delta_3, &price, &tome_index, &tax_count, &_castable, &_repeatable);
            castable  = _castable;
            repeatable = _repeatable;

            if (action_type[0] != 'O')
                 fprintf(stderr, "id = %d|type= %s|d0 = %d|d1 = %d| d2 = %d | d3 = %d | price = %d |tome = %d|tax = %d| %d | %d\n", action_id ,action_type ,delta_0, delta_1, delta_2, delta_3, price , tome_index, tax_count, _castable, _repeatable);

            if (!strcmp(action_type, "BREW"))
            {
                    id[i] = action_id;
                delta0[i] = delta_0;
                delta1[i] = delta_1;
                delta2[i] = delta_2;
                delta3[i] = delta_3;
                pricee[i] = price;
                b_index++;
            }
           if (!strcmp(action_type, "LEARN"))
            {
                 id_l[l_index] = action_id;
                l0[l_index] = delta_0;
                l1[l_index] = delta_1;
                l2[l_index] = delta_2;
                l3[l_index] = delta_3;
                l_index++;
            }
           if (!strcmp(action_type, "CAST"))
            {
              id_s[y_index] = action_id;
                d0[y_index] = delta_0;
                d1[y_index] = delta_1;
                d2[y_index] = delta_2;
                d3[y_index] = delta_3;
                castablee[y_index]  = _castable;
                y_index++;
            }

        }
                    //////////////////////////////////
                    // READING INVENTRIE OR MY BANK //
                    /////////////////////////////////

        for (int i = 0; i < 2; i++)
        {
           int inv_00, inv_01, inv_02, inv_03;
           int score;
           scanf("%d%d%d%d%d", &inv_00, &inv_01, &inv_02, &inv_03, &score);
           if (i == 0)
                {
                    inv_0 = inv_00;
                    inv_1 = inv_01;
                    inv_2 = inv_02;
                    inv_3 = inv_03;
                    my_score = score;
                }
            else 
                v_score = score;
        }

//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////  affichage des donnes /////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
        
        int r = 0; 
        fprintf(stderr,"\nBREW :\n");
        while (r < b_index)
            {
                fprintf(stderr, "id = %d | %d | %d | %d | %d | price = %d |\n",
                id[r], delta0[r], delta1[r], delta2[r], delta3[r], pricee[r]);
                r++;
            }
        
        r = -1;
        fprintf(stderr,"\nSpeel :\n");
        while (++r < y_index)
            fprintf(stderr, "id_s = %d | %d | %d | %d | d3 =  %d | castable = %d|\n",
            id_s[r], d0[r], d1[r], d2[r], d3[r], castablee[r]);

        r = -1;
        fprintf(stderr,"\nLEARN :\n");
         while (++r < l_index)
           fprintf(stderr, "id_l = %d | %d | %d | %d | %d |\n"
           ,id_l[r], l0[r], l1[r], l2[r], l3[r]);   
        
        fprintf(stderr,"\nmy bank :\n");
        fprintf(stderr,"inv_0 = %d | inv_1 = %d | inv_2 = %d | inv_3 = %d\n\n",
         inv_0,inv_1, inv_2, inv_3);

/////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////// SORT TO GET THE HIGH RECEPT PRICE ////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

        int index  =  0; 
        int j = 100;
        high = 0;
        int ssave = 10;

           

        
        if (0)
        {   
            while (index < b_index)
            {
                //dSomme = delta0[index] * 1 + delta1[index] * 2 + delta2[index] * 3 + delta3[index] * 4; 
                //def = bankSomme + dSomme; 
                
                high = 0;

                delta0[index ] *= -1;
                delta1[index ] *= -1;
                delta2[index ] *= -1;
                delta3[index ] *= -1;
                
                if (delta0[index] > 1 && inv_0 == 0) 
                       high += 1 * delta0[index];
                
                if (delta1[index] > 0)
                    {
                        if (inv_0 >= 1 )
                            high += 1 * delta1[index];
                        else 
                            high += 2 * delta1[index];

                    }
                if (delta2[index] > 0)
                    {
            
                        if (inv_1 >= 1)
                            high += 1 * delta2[index];
                        else 
                        {
                            if (inv_0 >= 1)
                                high += 2 * delta2[index];
                            else 
                                high += 3 * delta2[index];
                        }
                    }
                if (delta3[index] > 0)
                {
                 
                    if (delta2[index] >= 2)
                            high += 1 * delta3[index];
                    else 
                    {
                        if (inv_1 >= 1)
                            high += 2 * delta3[index];
                        else if (inv_1 < 1)
                            {
                                if (inv_0 == 0)
                                    high += 4 * delta3[index];
                                else 
                                    high += 3 * delta3[index];
                            } 
                    }

                }

                
                fprintf(stderr, " id = %d |  hight = %d | \n ",id[index] ,high);

                if (j > high)
                 {
                     ssave = index;
                     j = high;
                 }
              

                delta0[index ] *= -1;
                delta1[index ] *= -1;
                delta2[index ] *= -1;
                delta3[index ] *= -1;
                index++;
            }   

            fprintf(stderr , "lowest = id = %d\n",id[ssave]);

            high = ssave;
        }

        if (1) 
        {
            j = pricee[0];
            index = 0;

            while (index < b_index)
            { 
                if (j < pricee[index])
                    {   
                        j = pricee[index];
                        high = index;
                        index++;
                    }
                else 
                    index++;
            }
        }
        fprintf(stderr,"\nrecette vise : id = %d | %d | %d | %d | %d | price = %d | high = %d \n",
        id[high],delta0[high], delta1[high], delta2[high] , delta3[high] , pricee[high], high);

/////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////// process for spell // /////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
        int need = 0;
        int s = 0;
        int save_speel = -99990;
        int indexindex = 0;
        j = 0;

        i0 = inv_0 + delta0[high];
        i1 = inv_1 + delta1[high];      
        i2 = inv_2 + delta2[high];
        i3 = inv_3 + delta3[high];

        fprintf(stderr,"\n i0 = %d | i1 = %d | i2 =%d | i3 = %d \n\n", i0, i1, i2, i3);

///////////////////////////////// TO BREW ///////////////////////////////////////////////////////
        index_of_brewing = 0;
        if (i0 >= 0 && i1 >= 0 && i2 >= 0 && i3 >= 0)
            {
                    process = id[high];
                    action = "BREW";
                    index_of_brewing++;     
            }
//////////////////////////////////////////////////////////////////////////////////////////////////
        
        else 
        { 
                action = "CAST";

                if (i3 < 0)
                {
                    while (j < y_index)
                    {   
                        
                        if (d3[j] > 0)
                        {
                            s =  d2[j] * 100 + d1[j] * 10 + d0[j] * 1 ;
                            if (s > save_speel)
                            {
                                save_speel = s;
                                indexindex = j;
                            } 
                        }
                        j++;
                    }

                    if(d2[indexindex] + inv_2 < 0)
                    {
                        if (inv_1 == 0)
                        {
                            if (inv_0 == 0)
                                assign(0);
                            else 
                                assign(1);
                        }
                        else 
                            assign(2);
                    }
                    else if (d1[indexindex] + inv_1 < 0)
                    {
                            if (inv_0 == 0)
                                assign(0);
                            else 
                                assign(1);
                    }
                    else if (d0[indexindex] + inv_0 < 0)
                    {
                        assign(0);
                    }
                    else 
                        assign(indexindex);
                
        
        
        
                }
            else if (i2 < 0)
                {
                        j = 0;
                        indexindex = 0;
                        while (j < y_index)
                        {   
                            if (d2[j] > 0)
                            {
                                s =  d3[j] * 1000 + d1[j] * 10 + d0[j] * 1 ;
                                if (s > save_speel)
                                {
                                    save_speel = s;
                                    indexindex = j;
                                } 
                            }
                            j++;
                        }

                        if(d2[indexindex] + inv_2 < 0)
                    {
                        if (inv_1 == 0)
                        {
                            if (inv_0 == 0)
                                assign(0);
                            else 
                                assign(1);
                        }
                        else 
                            assign(2);
                    }
                    else if (d1[indexindex] + inv_1 < 0)
                    {
                            if (inv_0 == 0)
                                assign(0);
                            else 
                                assign(1);
                    }
                    else if (d0[indexindex] + inv_0 < 0)
                    {
                        assign(0);
                    }
                    else 
                        assign(indexindex);
                }
            else if (i1 < 0)
                {
                        j = 0;
                        indexindex = 0;
                        while (j < y_index)
                        {   
                            if (d1[j] > 0)
                            {
                                s =  d3[j] * 1000 + d2[j] * 100  + d0[j] * 1 ;
                                if (s > save_speel)
                                {
                                    save_speel = s;
                                    indexindex = j;
                                } 
                            }
                            j++;
                        }

                        
                        if (d0[indexindex] + inv_0 < 0)
                        {
                            assign(0);
                        }
                        else 
                            assign(indexindex);
                }
            else if (i0 < 0)
                {
                        j = 0;
                        indexindex = 0;
                        while (j < y_index)
                        {   
                            if (d0[j] > 0)
                            {
                                s =  d3[j] * 1000 + d2[j] * 100 + d1[j] * 10;
                                if (s > save_speel)
                                {
                                    save_speel = s;
                                    indexindex = j;
                                } 
                            }
                            j++;
                        }
                        if (d0[indexindex] + inv_0 < 0)
                        {
                            assign(0);
                        }
                        else 
                            assign(indexindex);    
                }
            else if (i0 >= 0 && i1 >= 0 && i2 >= 0 && i3 >= 0)
                {
                     index_of_brewing = 0;
                     process = id[high];
                     action = "BREW";
                     index_of_brewing++;   
                }
        }
        
        
        fprintf(stderr, "t0 = %d | t1 = %d | t2 = %d | t3 = %d | id = %d\n",d0[indexindex], d1[indexindex], d2[indexindex] , d3[indexindex] ,id_s[indexindex] );

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////::::::::::::::::::::::::::END OF SELL PROCESS ::::::::::::::://///////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////// LEARN //////////////////////////////////////////////////////////
       
        int id_to_learn = 0; 
        char *procii ;
        int index_to_learning = 0;
        int itiry = 0;    
        index = 0;

        if (numbersofspeels <= 1)
            {
                assign_l(numbersofspeels);
                index_to_learning = 1;
                id_to_learn = id_l[0];
                action = "LEARN";
            }
        else 
            index_to_learning = 0;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        
        fprintf(stderr,"=> action = %s | process = %d| castabilisation = %d\n", action , process, castablisation);

        ///// in the first league: BREW <id> | WAIT; later: BREW <id> | CAST <id> [<times>] | LEARN <id> | REST | WAIT
        
        l_index = y_index = b_index = index = 0;

        if (save != id_to_learn)
            try++;
            
        if ( ( (  (index_to_learning && save != id_to_learn) && ((inv_0 + inv_1 + inv_2 + inv_3) > 2)) || ((index_to_learning &&  try == 3) && ((inv_0 + inv_1 + inv_2 + inv_3) > 2)) ) && (!index_of_brewing))
            {
                numbersofspeels++;
                try = 0;
                printf("%s %d  Oh... I see...\n",action, id_to_learn );
                save = id_to_learn;
            }
        else     
        {
            char *s;
            s = (!strncmp(action ,"BREW", strlen(action))) ? "BOOM..!!":"Emmmm..";

            if (castablisation || !strncmp(action ,"BREW", strlen(action)))
                printf("%s %d %s\n",action, process, s); 
            else 
               printf("REST YuHuhUHu...\n");
        }
       
    }

    return 0;
}